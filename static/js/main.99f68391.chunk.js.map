{"version":3,"sources":["serviceWorker.js","Redux/Reducers/temp.js","Redux/Reducers/index.js","Pages/Main/Main.js","Pages/About/About.js","index.js","App/App.js"],"names":["Boolean","window","location","hostname","match","temp","state","arguments","length","undefined","action","type","Object","objectSpread","value","payload","combineReducers","Main","props","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","Component","About","store","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","react_router_dom","es","react_router","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECTSC,EATF,WAAwB,IAAvBC,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACjC,OAAQC,EAAOC,MACX,IAAK,OACD,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GAAIN,EAAX,CAAkBQ,MAAQJ,EAAOK,UACrC,QACI,OAAOT,ICFJU,cAAgB,CAC3BX,gDCFiBY,cACjB,SAAAA,EAAYC,GAAQ,OAAAN,OAAAO,EAAA,EAAAP,CAAAQ,KAAAH,GAAAL,OAAAS,EAAA,EAAAT,CAAAQ,KAAAR,OAAAU,EAAA,EAAAV,CAAAK,GAAAM,KAAAH,KACVF,0EAIN,OACIM,EAAAC,EAAAC,cAAA,0BAPsBC,aCAbC,cACjB,SAAAA,EAAYV,GAAQ,OAAAN,OAAAO,EAAA,EAAAP,CAAAQ,KAAAQ,GAAAhB,OAAAS,EAAA,EAAAT,CAAAQ,KAAAR,OAAAU,EAAA,EAAAV,CAAAgB,GAAAL,KAAAH,KACVF,0EAIN,OACIM,EAAAC,EAAAC,cAAA,2BAPuBC,aCY7BE,GCR2BF,YDQnBG,YAAYC,EAAa9B,OAAO+B,8BAAgC/B,OAAO+B,iCAErFC,IAASC,OACLV,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACIX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAUP,MAAOA,GACbL,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWvB,IACjCO,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWZ,MAGxCa,SAASC,eAAe,SL0GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.99f68391.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const temp = (state = {}, action) => {\n    switch (action.type) {\n        case \"TEST\":\n            return {...state, value : action.payload};\n        default:\n            return state\n    }\n};\n\nexport default temp;","import { combineReducers } from \"redux\";\nimport temp from './temp';\n\nexport default combineReducers({\n    temp,\n});","import React, {Component} from \"react\";\n\nexport default class Main extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div>\n                Main\n            </div>\n        )\n    }\n}","import React, {Component} from \"react\";\n\nexport default class About extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div>\n                about\n            </div>\n        )\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Switch, Route } from 'react-router';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from './Redux/Reducers';\nimport App from \"App/App\";\nimport Main from \"./Pages/Main/Main\";\nimport About from \"./Pages/About/About\";\n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <Route exact path=\"/\" component={Main} />\n            <Route path=\"/about\" component={About} />\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router';\n\nimport Main from \"../Pages/Main/Main\";\nimport About from \"../Pages/About/About\";\n\nexport default class App extends Component {\n    render() {\n        return (\n            <div></div>\n        );\n    }\n}"],"sourceRoot":""}